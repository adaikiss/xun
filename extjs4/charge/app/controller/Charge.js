/*
 * File: app/controller/Charge.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.Charge', {
    extend: 'Ext.app.Controller',

    _views: {
        chargeAddWindow: null,
        chargeEditWindow: null
    },
    rest: {
        add: {
            url: '/charge/',
            method: 'POST'
        }
    },
    models: [
        'Charge'
    ],
    stores: [
        'Charge'
    ],
    views: [
        'ChargeGridPanel',
        'CategoryComboBox',
        'ChargeAddWindow',
        'ChargeEditWindow'
    ],

    refs: [
        {
            ref: 'viewport',
            selector: 'viewport'
        }
    ],

    onChargeGridPanelAfterRender: function(abstractcomponent, options) {
        abstractcomponent.getStore().load();
    },

    onChargeAddFormRender: function(target) {
        var form = target;
        var categoryCombobox = Ext.create('MyApp.view.CategoryComboBox');
        form.down('fieldset').insert(2, categoryCombobox);
    },

    onChargeEditFormRender: function(target) {
        var form = target;
        var categoryCombobox = Ext.create('MyApp.view.CategoryComboBox');
        form.down('fieldset').insert(2, categoryCombobox);
    },

    onChargeAddFormSaveClick: function(button, e, options) {
        var grid = this.getViewport().down('chargeGridPanel');
        var loginController = this.getController('MyApp.controller.Login');
        console.debug(loginController.credential);
        var formPanel = button.up('form');
        var form = formPanel.getForm();
        if(form.isValid()){
            form.submit({
                url : this.rest.add.url,
                method : this.rest.add.method,
                params : {'user.id' : window.credential.id},
                success : function(fm, action){
                    grid.getStore().add(action.result.data);
                    grid.getView().refresh();
                    Ext.MessageBox.alert('提示', '操作成功!');
                    form.reset();
                    button.up('window').hide();
                }
            });
        }
    },

    onChargeAddFormCancelClick: function(button, e, options) {
        this._views.chargeAddWindow.down('form').getForm().reset();
        this._views.chargeAddWindow.hide();
    },

    onChargeAddClick: function(button, e, options) {
        this._views.chargeAddWindow.show();
    },

    onChargeEditClick: function(button, e, options) {
        this._views.chargeEditWindow.show();
    },

    onChargeDeleteClick: function(button, e, options) {

    },

    initView: function() {
        this._views.chargeAddWindow = Ext.create('MyApp.view.ChargeAddWindow');
        this._views.chargeEditWindow = Ext.create('MyApp.view.ChargeEditWindow');
    },

    init: function(application) {
        this.control({
            "#chargeGrid": {
                afterrender: this.onChargeGridPanelAfterRender
            },
            "#chargeAddForm": {
                render: this.onChargeAddFormRender
            },
            "#chargeEditForm": {
                render: this.onChargeEditFormRender
            },
            "#chargeAddFormSaveBtn": {
                click: this.onChargeAddFormSaveClick
            },
            "#chargeAddFormCancelBtn": {
                click: this.onChargeAddFormCancelClick
            },
            "#chargeAddBtn": {
                click: this.onChargeAddClick
            },
            "#chargeEditBtn": {
                click: this.onChargeEditClick
            },
            "#chargeDeleteBtn": {
                click: this.onChargeDeleteClick
            }
        });
    }

});
